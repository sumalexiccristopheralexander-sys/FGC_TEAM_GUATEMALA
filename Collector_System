

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotorEx;

@TeleOp(name = "Collector System", group = "Mechanisms")
public class Collector extends LinearOpMode {

    private DcMotorEx motorHex;

    private boolean hexForward = false;
    private boolean hexReverse = false;
    private boolean prevX, prevTriangle;

    private static final double HEX_POWER = 1.0;

    @Override
    public void runOpMode() throws InterruptedException {
        // Hardware mapping
        motorHex = hardwareMap.get(DcMotorEx.class, "motorHex");



        telemetry.addLine("Collector ready.");
        telemetry.update();
        waitForStart();

        while (opModeIsActive()) {
            // Read button input (gamepad2)
            boolean x = gamepad2.cross;
            boolean triangle = gamepad2.triangle;

            // Toggle system direction
            if (x && !prevX) {
                hexForward = !hexForward;
                hexReverse = false;
            } else if (triangle && !prevTriangle) {
                hexReverse = !hexReverse;
                hexForward = false;
            }

            // Execute based on toggle state
            if (hexForward) {
                motorHex.setPower(HEX_POWER);
            } else if (hexReverse) {
                motorHex.setPower(-HEX_POWER);
            } else {
                motorHex.setPower(0);
            }

            telemetry.addData("Collector", hexForward ? "→ Forward" : (hexReverse ? "← Reverse" : "Stopped"));
            telemetry.update();

            // Save previous button states (debounce)
            prevX = x;
            prevTriangle = triangle;
        }
    }
}
